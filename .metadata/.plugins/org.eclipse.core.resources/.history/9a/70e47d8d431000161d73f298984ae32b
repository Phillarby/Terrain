package TerrainBase;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;	
import java.util.List;

import processing.core.PApplet;	
import processing.core.PVector;

/**
 * A collection of static helper functions and variables
 * @author Philip Larby
 */
public class Helpers {

	/** The current camera */
	public static Camera Cam;
	
	public static PApplet P;
	
	/** Specify whether to draw cell bounding box */
	public static boolean DrawCellBounds = true;
	
	/** Specify whether to draw patch bounding box */
	public static boolean DrawPatchBounds = true;
	
	/** Specify whether to draw cell corner vertices */
	public static boolean DrawCellVertex = false;

	/** Specify whether to draw cell centre */
	public static boolean DrawCellCentre = true;
	
	/** Specify whether to draw scaffold centre point */
	public static boolean DrawScaffoldOrigin = false;
	
	/** Specify whether to draw terrain surface geometry */
	public static boolean DrawTriangleMesh = true;
	
	/** Specify whether to draw face edges on surface geometry */
	public static boolean DrawCellTriangles = true;
	
	/** The current number of patches in the scene */
	public static int PatchCount = 0;
	
	/** The current number of cells in the scene */
	public static int CellCount = 0;
	
	/** The height of the camera above the surface geometry */
	public static float ViewHeight = 0;
	
	/** Minimum density for cell inclusion in surface geometry */
	public static float DensityThreshold = 0.4f; 
	
	/** Number of times to subdivide each cell when adding the next level of detail */
	public static int PatchResolution = 4; 

	/** Subdivision resolution of root cell */
	public static int RootCellResolution = 2;
	
	/** The diameter of the earth in KMs, to create a realistic planetary scale */
	public static float EarthDiameter = 12742;  
	
	
	
	//Used for debugging, specifying the verbosity of log information.  Disable for production. 
	private static int _logLevel = 0; 
	
	/** Convert spherical coordinates to cartesian coordinates */
	public static PVector SphericalToCartesian(float Rho, float Theta, float Phi)
	{	
		//Instantiate a return object 
	    PVector ret = new PVector();
	    
	    //Perform conversion and load values into return vector.  
	    //Cast to float required as java trig functions return double precision values 
	    ret.x = (float)(Math.cos(Theta) * Math.sin(Phi) * Rho);
	    ret.y = (float)(Math.sin(Theta) * Math.sin(Phi) * Rho);
	    ret.z = (float)(Math.cos(Phi) * Rho);         		
	    
	    return ret;
	}
	
	/**
	 * Log debug output information
	 */
	public static void log(int i, String msg)
	{
		if (i <= _logLevel) 
			System.out.println(msg);
	}
	
	/**
	 * Get the density value for a specific cell.  At present this function determines if the surface of a sphere passes through
	 * the cell, and if so gives it a density value of 1, and if not, give it a density value of 0.  This allows cells that do not
	 * intersect the surface to be discarded.  More complex density functions are supported here.
	 * @param c the cell being evaluated
	 * @return the corresponding density value
	 */
	public static float Density(Cell c)
	{	
		//Perlin nose based function
		//return P.noise(c.getAbsolutePosition().x, c.getAbsolutePosition().y, c.getAbsolutePosition().z);
		
		//Define radius
		float radius = root(c).getBounds().x / 2.5f;
		
		//Cutoff threshold
		float threshold = 50;
		
		//the cell is not within the threshold distance of the base radius then discard it
		if (c.getMaxDist() < radius - threshold || c.getMinDist() > radius + threshold) 
			return 0; 
		else
		{
			return 1;
		}
	}
	
	/**
	 * Get the density value for a specific point determined by the position of a vertex.  The parent cell of the 
	 * vertex is required to provide an entry point to the scaffold hierarchy in order to reach the root cell. At
	 * present this function determines if the vertex lies inside or outside the surface of a sphere, but more complex
	 * density functions are supportable here.
	 * @param v The vertex
	 * @param parentCell The parent cell of the vertex
	 * @return The density value at the specified point
	 */
	public static float Density(DensityVertex v, Cell parentCell)
	{
		//Perlin noise based function
		//return P.noise(v.getAbsoloutePostion().x, v.getAbsoloutePostion().y, v.getAbsoloutePostion().z);
		
		Cell rootCell = root(parentCell);
		
		//Define radius
		float radius = rootCell.getBounds().x / 2.5f;
		
		//get Distance from root
		float distance = PVector.dist(v.getAbsoloutePostion(), rootCell.getAbsolutePosition());
		
		if (distance <= radius )
			return 1;
		else
			return 0;
	}
	
	/**
	 * Get a path through the scaffold hierarchy with the root element at index 0 and the
	 * specified cell in the final array position.
	 * @param c The leaf cell
	 * @return An array of cells sorted in navigation order through the hierarchy
	 */
	public static Cell[] getCellHierarchy(Cell c)
	{
		Cell[] ret; //return value
		
		//Using a linked list to ensure order is retained
		LinkedList<Cell> ch = new LinkedList<Cell>();
		
		//Start with the specified leaf cell
		Cell tc = c;  
		
		//iterate through all parents in hierarchy getting a reference as we go
		while (tc != null)
		{
			ch.addFirst(tc);
			tc = tc.getParentCell();
		}
		
		//convert linked list into array
		ret = new Cell[ch.size()];
		ch.toArray(ret);
		
		return ret;
	}
	
	/**
	 * Step up the LOD hierarchy to find the root of the specified cell
	 * @param c
	 * @return
	 */
	public static Cell root(Cell c)
	{
		//Recursively step up the hierarchy until no further parents exist
		return c.getParentCell() == null ? c : root(c.getParentCell());
	}
	
	/**
	 * Calculate the required Level Of Detail for a cell the specified distance from the camera
	 * @param distance The distance to the camera
	 * @return Required Level of Detail
	 */
	public static int LODCaclulator(float distance)
	{
	
//		if(distance > EarthDiameter * 10) return 1;
//		if(distance > EarthDiameter * 5) return 2;
//		if(distance > EarthDiameter * 2.5) return 3;
//		if(distance > EarthDiameter) return 4;
//		if(distance > EarthDiameter / 2.5) return 5;
//		if(distance > EarthDiameter / 5) return 6;
//		if(distance > EarthDiameter / 10) return 7;
//		if(distance > EarthDiameter / 13) return 8;
//		if(distance > EarthDiameter / 18) return 9;
//		if(distance > EarthDiameter / 25) return 10;
		return 2;
		
	}
	
	/**
	 * Check if an integer array contains the specified integer value
	 * @param array The array to check
	 * @param i The target value
	 * @return
	 */
	public static boolean intArrayContains(int [] array, int i)
	{
		for (int value : array)
			if (value == i) return true;
		
		return false;
	}
	
	/**
	 * Calculate all possible ordering of the supplies integer array
	 * @param edges
	 * @return A collection of integer arrays - each of which represents a unique ordering of the original
	 */
	public static ArrayList<Integer[]> permute(int[] edges){
		
		//Convert array into list for easier processing in recursive method
		List<Integer> lst = new ArrayList<Integer>();
	    for (int i = 0; i < edges.length; i++)
	    {
	        lst.add(edges[i]);
	    }
		
	    //Initiate recursive methods
		return permute(lst, 0);
	}
	
	//recursive method identifying all possible ordering of an array
	private static ArrayList<Integer[]> permute(List<Integer> values, int n){
        
		ArrayList<Integer[]> ret = new ArrayList<Integer[]>();
		
		for(int i = n; i < values.size(); i++){
            Collections.swap(values, i, n);
            ret.addAll(permute(values, n+1));
            Collections.swap(values, n, i);
        }
		
        if (n == values.size() -1){
            ret.add(values.toArray(new Integer[values.size()]));
        }
        
        return ret;
    }
	
}


